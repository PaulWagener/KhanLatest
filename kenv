#!/bin/bash
export COLOR_NC='\e[0m' # No Color
export COLOR_WHITE='\e[1;37m'
export COLOR_BLACK='\e[0;30m'
export COLOR_BLUE='\e[0;34m'
export COLOR_LIGHT_BLUE='\e[1;34m'
export COLOR_GREEN='\e[0;32m'
export COLOR_LIGHT_GREEN='\e[1;32m'
export COLOR_CYAN='\e[0;36m'
export COLOR_LIGHT_CYAN='\e[1;36m'
export COLOR_RED='\e[0;31m'
export COLOR_LIGHT_RED='\e[1;31m'
export COLOR_PURPLE='\e[0;35m'
export COLOR_LIGHT_PURPLE='\e[1;35m'
export COLOR_BROWN='\e[0;33m'
export COLOR_YELLOW='\e[1;33m'
export COLOR_GRAY='\e[0;30m'
export COLOR_LIGHT_GRAY='\e[0;37m'

export COLMSG=$COLOR_LIGHT_BLUE
export COLNC=$COLOR_NC
alias echo="echo -e"

DEPLOY=deploy
REQUIREMENTS=$DEPLOY/requirements.txt
VE=$DEPLOY/env
SETTINGS=settings.txt
SECRETS=secrets.py

APPDIR=tools/google_appengine
APPCFG=$APPDIR/appcfg.py
APPDEV=$APPDIR/dev_appserver.py

command_exists() {
  CMD=$1
  if [ -z "$1" ];then
    return 0
  fi
  if command -v $CMD &>/dev/null;then
    return 1
  else
    return 0
  fi
}

install_easyinstall() {
  sudo port install easy_install
  echo "Installing easy_install Mac port ..."
}

install_pip() {
  echo "You need to install pip."
}

kenv-install-virtualenv() {
  command_exists easy_install
  if [ $? -eq 1 ];then
    echo "Installing virtualenv ..."
    sudo easy_install virtualenv
  else
    install_easyinstall
    exit 1
  fi
}

kenv-create-virtualenv() {
  command_exists virtualenv
  if [ $? -eq 0 ];then
    install_virtualenv
  fi
  echo "${COLMSG}Creating virtual environment $VE ... $COLNC"
  virtualenv $VE
}


load-kenv() {
  echo "${COLMSG}Loading virtual environment $VE... $COLNC"
  CURR=`pwd`
  cd $VE &>/dev/null
  TMP_PS1="${PS1}"
  export TMP_PS1
  source bin/activate
  if [ "${PS1}" == "(kenv)${TMP_PS1}" ]; then
    PS1="(kenv)${TMP_PS1}"
    export PS1
  fi
  cd $CURR &>/dev/null
}


kenv-init-submodules() {
  echo "${COLMSG}Initializing submodules ... $COLNC"
  git submodule init
  git submodule update
#  cd third_party/appengine-search-src/search/
#  rm -rf pyporter2
#  ln  -s ../../../search/pyporter2
#  cd -
}

install_deps() {
  pip install ez_setup
  pip install -r $REQUIREMENTS
}

P=`pwd`
kenv-create-deploy() {
  if [ ! -e '$SECRETS' ];then
    echo_install "Missing the file $SECRETS in $P"
    exit
    python tools/appengine_download.py tools/
  fi
  if [ ! -e $APPCFG ];then
    echo_install "Downloading the Google App Engine"
    python tools/appengine_download.py tools/
  fi
  echo "${COLMSG}Creating a deployment version ... $COLNC"
  python deploy/deploy.py
}

echo_install() {
  echo "${COLMSG}${1}${COLNC}"
}

echo_info() {
  echo "${COLMSG}${1}${COLNC}"
}

kenv-upload-deploy() {

  . $SETTINGS
  if [ -z $PASS ] | [ -z $EMAIL ]; then
    echo_install "Please proceed to enter the user/pass"
    kenv-setuser
    if [ -z $EMAIL ]; then
        echo_install "Email empty"
    fi
    if [ -z $PASS ]; then
        echo_install "Password empty"
    fi
    exit 1
  fi

  echo_info "Uploading version ..."
  echo $PASS | python $APPCFG --passin -e $EMAIL update .

  command_exists notify-send
  if [ $? -eq 1 ];then
    notify-send "Depoyment complete!"
  fi
}

start_deploy() {
  if [ -d $VE ];then
    load-kenv
    kenv-create-deploy
    kenv-upload-deploy
  else
    kenv-init-submodules
    kenv-create-virtualenv
    load-kenv
    kenv-install-deps
    kenv-create-deploy
    kenv-upload-deploy
  fi
}

kenv-deploy() {
    kenv-create-deploy
    kenv-upload-deploy
}

kenv-clean-ve() {
    rm -rf $VE
}

kenv-run-local() {
    python $APPDEV --high_replication --use_sqlite --allow_skipped_files --datastore_path=testutil/test_db2.sqlite . 
}

kenv-clear-server() {
    python $APPDEV -c --high_replication --use_sqlite --allow_skipped_files --datastore_path=testutil/test_db2.sqlite  .
    #curl localhost:8080/api/v1/import
}

kenv() {
    if [ -z $1 ]; then
        echo "\n"
        echo "  Khan Academy testing and deployment utility."
        echo "\n"
        echo "  Syntax:"
        echo "    kenv [command]"
        echo "\n"
        echo "  List of commands:"
        echo "    setuser       Sets the user&password for automatic deploy"
        echo "    deploy        Create a depoyable current version and deploys to server if possible"
        echo "    run-local     Runs local AppEngine previous run data storage"
        echo "    clear-local   Runs local AppEngine clear data storage"
        echo "\n"
    else 
        kenv-$1
    fi
}

kenv-downloadappengine() {
    wget -O - http://googleappengine.googlecode.com/files/google_appengine_1.7.3.zip 
}

kenv-setuser() {
    read -p "User email: " EMAIL 
    read -p "Password: " PASS
    echo -e "PASS=$PASS\nEMAIL=$EMAIL" > kenv_settings
}

PATH="$PATH:$APPDIR:$PWD"
PYTHONPATH=${APPDIR}:${PWD}:${PWD}/rocket:${PYTHONPATH}
export PATH
export PYTHONPATH
load-kenv
kenv
PATH="$PATH:$APPDIR:$PWD"
PYTHONPATH=${APPDIR}:${PWD}:${PWD}/rocket:${PYTHONPATH}
export PATH
export PYTHONPATH
#export PATH
